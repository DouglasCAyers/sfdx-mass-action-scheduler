# Inspired by https://github.com/trailheadapps/lwc-recipes

version: 2.1

# Defining default values for all jobs
defaults: &defaults
    docker:
        - image: salesforce/salesforcedx:latest-full

jobs:
    setup_dx_orgs:
        # Authenticates to DevHub and creates a scratch org.
        # The auth url is stored in an env var of a context defined in CircleCI settings.
        <<: *defaults
        steps:
            - attach_workspace:
                at: ~/
            - run:
                name: Authenticate DevHub
                command: |
                    echo $SFDX_DEVHUB_AUTH_URL > sfdx_devhub_auth_url.txt
                    sfdx force:auth:sfdxurl:store --setalias DevHub --setdefaultdevhubusername --sfdxurlfile sfdx_devhub_auth_url.txt
            - run:
                name: Create Scratch Org
                command: |
                    sfdx force:org:create --targetdevhubusername DevHub --setalias ciorg --setdefaultusername --definitionfile config/project-scratch-def.json --durationdays 1
            - persist_to_workspace:
                root: ~/
                paths:
                    - .sfdx/*
                    - project/*
    deploy_source:
        # Deploys the source metadata to the scratch org, assigns a permission set, and creates some test data.
        # The test data is necessary for the Apex report service tests to pass since they require SeeAllDAta=true.
        # https://github.com/douglascayers-org/sfdx-mass-action-scheduler/wiki/Install-Source-Code
        <<: *defaults
        steps:
            - attach_workspace:
                at: ~/
            - run:
                name: Push Source
                command: |
                    sfdx force:source:push --targetusername ciorg
            - run:
                name: Assign Permission Set
                command: |
                    sfdx force:user:permset:assign --targetusername ciorg --permsetname Mass_Action_Admin
            - run:
                name: Load Test Data
                command: |
                    sfdx force:data:record:create --targetusername ciorg --sobjecttype Account --values "Name='dca_mass_action: MA Test Account'"
    run_apex_tests:
        # Runs the Apex unit tests and collects code coverage.
        <<: *defaults
        steps:
            - attach_workspace:
                at: ~/
            - run:
                name: Run Apex Tests
                command: |
                    sfdx force:apex:test:run --targetusername ciorg --codecoverage --resultformat human --suitenames Mass_Action_Scheduler_Test_Suite --outputdir ./test-results/apex --wait 20
            - run:
                name: Collect Flow Test Coverage
                command: |
                    sfdx force:data:soql:query --targetusername ciorg --usetoolingapi --query "SELECT FlowVersionId, FlowVersion.Definition.DeveloperName, MAX(NumElementsCovered) ItemsCovered, MIN(NumElementsNotCovered) ItemsNotCovered FROM FlowTestCoverage WHERE FlowVersionId IN (SELECT ActiveVersionId FROM FlowDefinition) GROUP BY FlowVersionId, FlowVersion.Definition.DeveloperName" --json | jq -r '[ .result.records[] | ( .ItemsCovered + .ItemsNotCovered ) as $totalLines | ( ( .ItemsCovered / $totalLines * 100 ) | round ) as $coveredPercent | { id: .FlowVersionId, name: ( .DeveloperName + ".flow-meta.xml" ), totalLines: $totalLines, totalCovered: .ItemsCovered, coveredPercent: $coveredPercent } ]' > ./test-results/apex/test-result-flowcoverage.json
                    sfdx force:data:soql:query --targetusername ciorg --usetoolingapi --query "SELECT ActiveVersionId, DeveloperName FROM FlowDefinition WHERE ActiveVersionId NOT IN ( SELECT FlowVersionId FROM FlowTestCoverage ) AND ActiveVersion.ProcessType IN ( 'AutoLaunchedFlow', 'CustomEvent', 'InvocableProcess', 'Workflow' )" --json | jq -r '[ .result.records[] | { id: .ActiveVersionId, name: ( .DeveloperName + ".flow-meta.xml" ), totalLines: 0, totalCovered: 0, coveredPercent: 0 } ]' > ./test-results/apex/test-result-noflowcoverage.json
            - persist_to_workspace:
                # The Apex test will store the test results in the `test-results` folder (which is a sub-folder of 'project')
                # The test data will be uploaded to Codecov.io in another step.
                root: ~/
                paths:
                    - project/*
            - store_test_results:
                path: ./test-results/
            - store_artifacts:
                path: ./test-results/apex
    upload_code_coverage:
        # Uploads code coverage results to Codecov.io.
        # https://codecov.io/gh/douglascayers-org/sfdx-mass-action-scheduler
        <<: *defaults
        steps:
            - attach_workspace:
                at: ~/
            - run:
                name: Push to Codecov.io
                command: |
                    # Uploading test coverage results
                    bash <(curl -s https://codecov.io/bash)
    cleanup_dx_orgs:
        # Deletes the scratch org to free up allocations.
        <<: *defaults
        steps:
            - attach_workspace:
                at: ~/
            - run:
                name: Delete Scratch Org
                command: |
                    sfdx force:org:delete --targetdevhubusername DevHub --targetusername ciorg --noprompt
            - persist_to_workspace:
                root: ~/
                paths:
                    - .sfdx/*
                    - project/*

workflows:
    version: 2.1
    build_and_test:
        jobs:
            - setup_tooling
            - setup_dx_orgs:
                context: douglascayers-org
                requires:
                    - setup_tooling
            - deploy_source:
                context: douglascayers-org
                requires:
                    - setup_dx_orgs
            - run_apex_tests:
                context: douglascayers-org
                requires:
                    - deploy_source
            - upload_code_coverage:
                context: douglascayers-org
                requires:
                    - run_apex_tests
            - cleanup_dx_orgs:
                context: douglascayers-org
                requires:
                    - setup_dx_orgs
                    - deploy_source
                    - run_apex_tests
                    - upload_code_coverage
